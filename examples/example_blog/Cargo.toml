[package]
name = "example_blog"
version = "0.1.0"
edition = "2021"

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
tracing-wasm = "0.2"
leptos = { version = "0.7", features = ["tracing"] }
leptos_axum = { version = "0.7", optional = true }
serde = { version = "1", features = ["derive"] }
axum = { version = "0.7", optional = true }
tokio = { version = "1", features = ["full"], optional = true }
console_error_panic_hook = "0.1"
wasm-bindgen = "0.2"
lipsum = "0.9.1"
futures.workspace = true
parking_lot.workspace = true
tracing.workspace = true
leptos-fetch = { path = "../../leptos-fetch", features = ["devtools"] }

[features]
hydrate = ["leptos/hydrate"]
ssr = [
  "dep:axum",
  "dep:tokio",
  "leptos/ssr",
  "leptos-fetch/ssr",
  "dep:leptos_axum",
]

[package.metadata.leptos]
# The name used by wasm-bindgen/cargo-leptos for the JS/WASM bundle. Defaults to the crate name
output-name = "example_blog"
# The site root folder is where cargo-leptos generate all output. WARNING: all content of this folder will be erased on a rebuild. Use it in your server setup.
site-root = "target/site"
# The site-root relative folder where all compiled output (JS, WASM and CSS) is written
# Defaults to pkg
site-pkg-dir = "pkg"
# [Optional] Files in the asset-dir will be copied to the site-root directory
assets-dir = "public"
# The IP and port (ex: 127.0.0.1:3000) where the server serves the content. Use it in your server setup.
site-addr = "127.0.0.1:3000"
# The port to use for automatic reload monitoring
reload-port = 3001
# [Optional] Command to use when running end2end tests. It will run in the end2end dir.
end2end-cmd = "cargo make test-ui"
end2end-dir = "e2e"
#  The browserlist query used for optimizing the CSS.
browserquery = "defaults"
# Set by cargo-leptos watch when building with that tool. Controls whether autoreload JS will be included in the head
watch = false
# The environment Leptos will run in, usually either "DEV" or "PROD"
env = "DEV"
# The features to use when compiling the bin target
#
# Optional. Can be over-ridden with the command line parameter --bin-features
bin-features = ["ssr"]

# If the --no-default-features flag should be used when compiling the bin target
#
# Optional. Defaults to false.
bin-default-features = false

# The features to use when compiling the lib target
#
# Optional. Can be over-ridden with the command line parameter --lib-features
lib-features = ["hydrate"]

# If the --no-default-features flag should be used when compiling the lib target
#
# Optional. Defaults to false.
lib-default-features = false
